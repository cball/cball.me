<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Level Up</title>
  <subtitle>Your development and consulting skills</subtitle>
  <id>http://cball.me/</id>
  <link href="http://cball.me/"/>
  <link href="http://cball.me/feed.xml" rel="self"/>
  <updated>2014-05-02T15:00:00Z</updated>
  <author>
    <name>Chris Ball</name>
  </author>
  <entry>
    <title>Non-RESTful API calls with Ember Data</title>
    <link rel="alternate" href="http://cball.me/non-restful-api-calls-with-ember-data/"/>
    <id>http://cball.me/non-restful-api-calls-with-ember-data/</id>
    <published>2014-05-02T15:00:00Z</published>
    <updated>2014-05-02T11:11:17-04:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr /&gt;

&lt;p&gt;When developing an application using Ember and Ember Data, if the API you're using is a completely RESTful interface, things are very straightforward. Once you need to make a call that does not fit into standard REST conventions, such as &lt;strong&gt;task/:id/complete&lt;/strong&gt; as PUT request, you have a choice to make. Your first instinct might be to reach for Ember.$.ajax, but don't; especially if you're sending custom headers or using a namespace. </summary>
    <content type="html">&lt;hr /&gt;

&lt;p&gt;When developing an application using Ember and Ember Data, if the API you're using is a completely RESTful interface, things are very straightforward. Once you need to make a call that does not fit into standard REST conventions, such as &lt;strong&gt;task/:id/complete&lt;/strong&gt; as PUT request, you have a choice to make. Your first instinct might be to reach for Ember.$.ajax, but don't; especially if you're sending custom headers or using a namespace.  &lt;/p&gt;

&lt;p&gt;The following examples use ember-cli, but should be the same for an application using ember-appkit.&lt;/p&gt;

&lt;h4 id="know-thy-adapter"&gt;Know thy adapter&lt;/h4&gt;

&lt;p&gt;Ember Data has the concept of an adapter that tells your application how to talk to your persistence layer. It is typically called from the store object through the use of something like &lt;code&gt;this.store.find('task', 1)&lt;/code&gt;, but occasionally you'll need to use it directly.&lt;/p&gt;

&lt;p&gt;Let's say we have an application that is in the process of moving to version 2 of an API, and we want start by updating our Task model to use that version. In version 1 of the API, we just updated the complete boolean on a Task. For version 2, we need to perform a number of actions on task complete, so a dedicated /&lt;strong&gt;tasks/:id/complete&lt;/strong&gt; API call was added. With Ember Data, using different API versions on a per-model basis is a breeze.&lt;/p&gt;

&lt;p&gt;Here is our application-wide adapter:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// app/adapters/application.js
&lt;/span&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;DS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ActiveModelAdapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;                            
  &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://api.coolapp.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                                                   
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                             
    &lt;span class="s1"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/vnd.api.coolapp.com; version=1&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;                                                                      
&lt;span class="p"&gt;});&lt;/span&gt;                           
&lt;/pre&gt;
&lt;p&gt;And the new task adapter:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// app/adapters/task.js
&lt;/span&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;DS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ActiveModelAdapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                             
    &lt;span class="s1"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/vnd.api.coolapp.com; version=2&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;              
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;h4 id="make-the-non-restful-call"&gt;Make the Non-RESTful call&lt;/h4&gt;
&lt;p&gt;Now that the adapters are in place, we add a complete action to our TasksShowController that will make the proper API call.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// app/controllers/tasks/show.js
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;TasksShowController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;           
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                        
    &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;                                           
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;adapter:task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                                                    
      &lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completeTaskUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;_this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transitionToRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completeFailure&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;taskCompleteFailure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// show a nice message
&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;completeTaskUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                   
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buildURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/complete&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;TasksShowController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We first store the current context to a variable, since we will lose the scope inside the &lt;code&gt;.then&lt;/code&gt; function. &lt;/p&gt;

&lt;p&gt;Then, we grab the content (which represents the task) from our controller using &lt;code&gt;this.get('content')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we look up the TaskAdapter, and use the ajax method defined there. Using &lt;code&gt;adapter.ajax&lt;/code&gt; instead of &lt;code&gt;Ember.$.ajax&lt;/code&gt; will leverage any headers or namespaces defined on the adapter.&lt;/p&gt;

&lt;p&gt;Finally, we want to construct a url that has the correct host and path. If you are running your API on the same host as your Ember application, you could just use '/tasks/1/complete' in the ajax call above, but building the url through the adapter is a great practice since you are insulated from change at an adapter level down the line.&lt;/p&gt;

&lt;p&gt;When we get the response back, we call &lt;code&gt;task.setProperties&lt;/code&gt; with the updated task from the response. This will mark the task as complete.&lt;/p&gt;

&lt;h4 id="lessons-learned"&gt;Lessons Learned&lt;/h4&gt;

&lt;p&gt;With adapters, Ember Data gives you a wonderful mechanism for incrementally upgrading an API version in an application, or even using a different API backend on a per-model basis.&lt;/p&gt;

&lt;p&gt;If you need to make a non-RESTful call in an application using Ember Data, reach for &lt;code&gt;adapter.ajax&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Book Some Janitor Time</title>
    <link rel="alternate" href="http://cball.me/book-some-janitor-time/"/>
    <id>http://cball.me/book-some-janitor-time/</id>
    <published>2014-04-24T03:11:00Z</published>
    <updated>2014-04-23T22:52:41-04:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr /&gt;
&lt;p&gt;If your team works in an office, you probably have a janitor that comes in to clean it. It might happen daily or weekly, but chances are that it happens. What if you applied that same mindset to your codebase?</summary>
    <content type="html">&lt;hr /&gt;
&lt;p&gt;If your team works in an office, you probably have a janitor that comes in to clean it. It might happen daily or weekly, but chances are that it happens. What if you applied that same mindset to your codebase?&lt;/p&gt;

&lt;p&gt;Most startups have something in common; a &lt;em&gt;massive&lt;/em&gt; feature backlog. No matter how much you work, and how productive you are, this will continue to grow. Over time, you will find that your team "has no time to make x better" because there are "too many features that have been promised to business/the client/the stakeholder". &lt;/p&gt;

&lt;p&gt;Or maybe you've just spent a few weeks on a feature, only to get to the very end of it and find you need a little bit of refactoring to make it perfect. Only, you've already missed your deadline so you can't afford the time. In a perfect world, you should always add that last refactor or tweak to make each feature great, but we all know that there are times when you just can't.&lt;/p&gt;

&lt;p&gt;So, how do we find the time for these tweaks, fix-ups, or a chance to try out something that may improve app performance? By booking some janitor time.&lt;/p&gt;

&lt;p&gt;Here are a few ways I've found that work (substitute Friday for whatever day makes sense at your company).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id="option-1-every-developer-every-friday"&gt;Option 1: Every developer, every Friday&lt;/h4&gt;
    &lt;p&gt;While this option is the best, its also the least realistic for most companies since nothing except high priority bugs will happen on Fridays. A hard sell, but if your company will allow you go for this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id="option-2-every-developer-9am-12pm-friday-12-day"&gt;Option 2: Every developer, 9am-12pm Friday (1/2 day)&lt;/h4&gt;
    &lt;p&gt;Similar to option above, just without allocating the entire day.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id="option-3-one-developer-every-friday"&gt;Option 3: One developer, every Friday&lt;/h4&gt;
    &lt;p&gt;The key to making this option work is to add rotation. You can keep the same day and rotate developers, or rotate both days and developers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id="option-4-every-developer-first-few-hours-of-the-day"&gt;Option 4: Every developer, first few hours of the day&lt;/h4&gt;
    &lt;p&gt;This is the lowest slice of time I recommend allocating. Any lower, and chances are you'll be hitting your stride just as you have to stop and switch contexts.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="ok-the-time-is-booked-what-do-we-work-on"&gt;Ok, the time is booked. What do we work on?&lt;/h3&gt;
&lt;p&gt;First, develop a small queue of items other developers could address. I like to use Trello for planning things like this. Anytime you get an idea, toss it in the queue and someone can pick it up if they don't know what to work on during their janitor time.&lt;/p&gt;

&lt;p&gt;Here are a few examples to get you started:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Review your most recent feature&lt;/strong&gt;. If there is any refactoring that can be done to increase readability or simplify the code, do it now.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Check for n+1 queries&lt;/strong&gt;. If you use Ruby, use a gem like &lt;a href="https://github.com/flyerhzm/bullet"&gt;bullet&lt;/a&gt; or a service like &lt;a href="http://skylight.io"&gt;skylight.io&lt;/a&gt; to help you. Kocking out 4-5 of these will drastically improve the performance of your app, especially if they are all on one page.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[Insert process that everyone always complains about]&lt;/strong&gt;. Recently, I was working with a team that had a custom process for preparing a seed database for tests. This is fine. However, if you didn't specify the test environment, it would blow away your development database, which isn't so fine. Total time to fix it? 45 seconds. &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Find your slowest loading page&lt;/strong&gt; and make it render faster. Don't just think queries either, look at iterating in templates, etc. Anything you can accomplish here is a win.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implement a CDN&lt;/strong&gt;, add far-future expire headers, and gzip responses. People often forget this, but it has massive performance benefits.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="try-it-out"&gt;Try it out&lt;/h3&gt;
&lt;p&gt;I've found this to be a great way to make sure you allocate time for code cleanup. Remember: "I'll come back to that" will never come. Future you will thank you because you're protecting everyone from a landslide of technical debt and slow applications.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>One Way to be Insanely Productive as a Developer</title>
    <link rel="alternate" href="http://cball.me/one-way-to-be-insanely-productive-as-a-developer/"/>
    <id>http://cball.me/one-way-to-be-insanely-productive-as-a-developer/</id>
    <published>2014-04-14T12:30:00Z</published>
    <updated>2014-04-15T16:31:45-04:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr /&gt;
&lt;p&gt;Most of us are easily distracted. It's very tempting to check email, browse your Twitter feed, or poke around on Reddit. Over time, I've found that you can still do all of those things, you just have to timebox them. The biggest productivity boost I've found actually has nothing to do with programming.</summary>
    <content type="html">&lt;hr /&gt;
&lt;p&gt;Most of us are easily distracted. It's very tempting to check email, browse your Twitter feed, or poke around on Reddit. Over time, I've found that you can still do all of those things, you just have to timebox them. The biggest productivity boost I've found actually has nothing to do with programming.&lt;/p&gt;

&lt;h3 id="the-pomodoro-technique"&gt;The Pomodoro Technique&lt;/h3&gt;
&lt;p&gt;You may have heard of &lt;strong&gt;The Pomodoro Technique&lt;/strong&gt;. It's been around since the 1980's. The name is the Italian word for tomato - and apparently the first physical timers made for this technique were kitchen timers shaped like tomatoes. But, enough history. Let's talk about how it can help you.&lt;/p&gt;

&lt;h4 id="get-an-app"&gt;Get an app&lt;/h4&gt;
&lt;p&gt;I've tried a few different ones both on my phone and my laptop. Out of them, my favorite is called &lt;a href="http://martakostova.github.io/timer/"&gt;Timer - Personal Time Manager&lt;/a&gt;. You can compile it yourself, or grab it from the App Store.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Timer Screenshot" class="no-resize" src="http://cball.me.s3.amazonaws.com/timer-icon.png" /&gt;&lt;/p&gt;

&lt;h4 id="work-for-25-minutes"&gt;Work for 25 minutes&lt;/h4&gt;
&lt;p&gt;Some people like to make their initial session a planning section, but I already know the first thing I want to work on each day, so I just hop right to it.&lt;/p&gt;

&lt;p&gt;Here's the hard part - force yourself to shut down email, Twitter, or anything else thats not work and might distract you. Concentrate on your task for 25 minutes. Trust me, its enough time to get in the zone and crank away. When your time is up, your app will tell you you're done. You're ready for a break! Just resist the urge to plow through and keep working.&lt;/p&gt;

&lt;h4 id="take-a-5-minute-break"&gt;Take a 5 minute break&lt;/h4&gt;
&lt;p&gt;One your 25 minute work cycle is up you get a 5 minute break. During my 5 minute break, I do a few things. I will check email and see if anything is really important that I need to address. I'll catch up on Twitter, saving anything that looks interesting to Instapaper for later reading. I'll also walk around a bit, which I highly, highly recommend. A little movement a few times an hour works wonders. Again, your app will tell you when the break is up and ask if you're ready for the next work cycle.&lt;/p&gt;

&lt;p&gt;Feel free to change anything else you want, but try to use the default break settings. Lots of research went into the suggested times, and I'm willing to bet their reasons for choosing a timeframe are better than mine.&lt;/p&gt;

&lt;h4 id="repeat-this-cycle-4-times"&gt;Repeat this cycle 4 times&lt;/h4&gt;
&lt;p&gt;On the fourth cycle of timers and breaks, your 5 minute break turns into a 10 minute break. During this break, I try to go get a snack, water, or coffee, and like before I walk around a bit. I will also catch up on email or twitter, or maybe read an article I saved during one of my previous breaks.&lt;/p&gt;

&lt;p&gt;After the long break, congratulate yourself. You've just gone through 2 hours and 5 minutes of your day and maintained intense concentration while doing it.&lt;/p&gt;

&lt;h4 id="take-a-lunch"&gt;Take a lunch!&lt;/h4&gt;
&lt;p&gt;I can't even count how many developers I know that either do not take lunch or do so at their desks while continuing to work. Once you see how much you can accomplish in the first 4 hours of your day, I'll bet you can afford to take some time to sit and relax away from the machine. Please do this!&lt;/p&gt;

&lt;h4 id="try-to-not-work-more-than-8-hours"&gt;Try to not work more than 8 hours&lt;/h4&gt;
&lt;p&gt;It's very hard sometimes for us as programmers to stop working. Again, you should be making a lot of progress and shouldn't have any trouble put your work to rest until the next morning.&lt;/p&gt;

&lt;h4 id="dont-try-to-fit-a-minimum-number-of-pomodoros-per-day"&gt;Don't try to fit a minimum number of Pomodoros per day&lt;/h4&gt;
&lt;p&gt;Sometimes, things come up. Maybe you have meetings to go to (though let's hope those are limited), or maybe you're just having an off day. It's ok, and it happens. &lt;/p&gt;

&lt;h4 id="always-find-ways-to-improve"&gt;Always find ways to improve&lt;/h4&gt;
&lt;p&gt;Our entire industry revolves around learning and staying up-to-date. Leveling up is all about taking small, consistent steps in order to improve your craft. And sometimes, those steps don't have anything to do with code. If you've reached a plateau, want to increase your productivity, or find yourself easily distracted, give Pomodoro a try. Let me know if it helps you!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Go Code Spelunking</title>
    <link rel="alternate" href="http://cball.me/go-code-spelunking/"/>
    <id>http://cball.me/go-code-spelunking/</id>
    <published>2014-04-07T04:00:00Z</published>
    <updated>2014-04-07T19:25:04-04:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr /&gt;
&lt;p&gt;Code Spelunking (a fancy way to say reading and understanding source code) is an great way to level up quickly. Think about it - your favorite open source library is a pool of knowledge from a talented community that has been improved over time. Learn from it!</summary>
    <content type="html">&lt;hr /&gt;
&lt;p&gt;Code Spelunking (a fancy way to say reading and understanding source code) is an great way to level up quickly. Think about it - your favorite open source library is a pool of knowledge from a talented community that has been improved over time. Learn from it!&lt;/p&gt;

&lt;p&gt;Let's look at two specific ways this can help you as a programmer. First, it can give you a proper way to structure an unknown concept. Second, it can teach you ways to use your favorite language in ways you didn't think of. Let's look specifically at &lt;strong&gt;adding configuration to a ruby gem&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id="adding-configuration-to-a-ruby-gem"&gt;Adding Configuration to a Ruby Gem&lt;/h3&gt;

&lt;p&gt;Lets assume you've written a ruby gem that does something awesome when a branch is pushed to git. You as the developer make it happen:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CoolGitGem&lt;/span&gt;
  &lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Git&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;push_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;do_awesome_stuff&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ship it. Then you realize that you're only really supposed to do awesome stuff when the master branch is pushed to:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CoolGitGem&lt;/span&gt;
  &lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Git&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;push_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branch_should_do_awesome_stuff?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;do_awesome_stuff&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;branch_should_do_awesome_stuff?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;parsed_git_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/master/&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;parsed_git_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;git_branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:git&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:branch&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.to_s.strip&lt;/span&gt;
      &lt;span class="n"&gt;git_branch&lt;/span&gt;&lt;span class="nf"&gt;.sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^origin\//&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Glory. Next, let's say you want to add custom data to an internal dashboard when other developers push code (for sake of argument, assume your company runs its own git server instead of using GitHub). The dashboard is on a separate app, so you add your newly created gem to it. But now, you've got a problem… one app should do_awesome_stuff when master is involved and the other should do _awesome_stuff all the time.&lt;/p&gt;

&lt;p&gt;This is a perfect time for to add configuration to your gem. Rather than asking StackOverflow, lets look at some gems that we know have quality code and see how they do configuration. Not only will that give us a correct answer, but also a chance to look at how others have a approached this problem in open-source libraries that get a lot of use by the community.&lt;/p&gt;

&lt;h4 id="example-clearance-simplified"&gt;Example: Clearance (simplified)&lt;/h4&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Clearance&lt;/span&gt;
  &lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Configuration&lt;/span&gt;
    &lt;span class="kp"&gt;attr_writer&lt;/span&gt; &lt;span class="ss"&gt;:allow_sign_up&lt;/span&gt;

    &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;
      &lt;span class="ss"&gt;:cookie_domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:cookie_expiration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:cookie_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;#...&lt;/span&gt;

    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;initialize&lt;/span&gt;
      &lt;span class="vi"&gt;@allow_sign_up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="vi"&gt;@cookie_expiration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nf"&gt;.year.from_now.utc&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="vi"&gt;@cookie_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
      &lt;span class="c1"&gt;#...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;user_model&lt;/span&gt;
      &lt;span class="vi"&gt;@user_model&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;allow_sign_up?&lt;/span&gt;
      &lt;span class="vi"&gt;@allow_sign_up&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;user_id_parameter&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;user_model&lt;/span&gt;&lt;span class="nf"&gt;.model_name.singular&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_id&amp;quot;&lt;/span&gt;&lt;span class="nf"&gt;.to_sym&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configuration&lt;/span&gt;
    &lt;span class="vi"&gt;@configuration&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Configuration&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;h4 id="example-carrierwave-simplified"&gt;Example: Carrierwave (simplified)&lt;/h4&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CarrierWave&lt;/span&gt;

  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Uploader&lt;/span&gt;
    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Configuration&lt;/span&gt;
      &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

      &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;class_attribute&lt;/span&gt; &lt;span class="ss"&gt;:_storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:_cache_storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:instance_writer&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;

        &lt;span class="n"&gt;add_config&lt;/span&gt; &lt;span class="ss"&gt;:root&lt;/span&gt;
        &lt;span class="n"&gt;add_config&lt;/span&gt; &lt;span class="ss"&gt;:base_path&lt;/span&gt;
        &lt;span class="n"&gt;add_config&lt;/span&gt; &lt;span class="ss"&gt;:asset_host&lt;/span&gt;
        &lt;span class="n"&gt;add_config&lt;/span&gt; &lt;span class="ss"&gt;:permissions&lt;/span&gt;
        &lt;span class="c1"&gt;#...&lt;/span&gt;

       	&lt;span class="c1"&gt;# set default values&lt;/span&gt;
        &lt;span class="n"&gt;reset_config&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ClassMethods&lt;/span&gt;

        &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;
            &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;._storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="nf"&gt;.is_a?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;storage_engines&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;
          &lt;span class="k"&gt;end&lt;/span&gt;
          &lt;span class="n"&gt;_storage&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="n"&gt;alias_method&lt;/span&gt; &lt;span class="ss"&gt;:storage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:storage&lt;/span&gt;

        &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;add_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nb"&gt;class_eval&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;RUBY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;__LINE__&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="sh"&gt;
            #... a bunch of methods that get added to class
&lt;/span&gt;&lt;span class="no"&gt;          RUBY&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt;
          &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;reset_config&lt;/span&gt;
          &lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
            &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mo"&gt;0644&lt;/span&gt;
            &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.directory_permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mo"&gt;0755&lt;/span&gt;
            &lt;span class="c1"&gt;#...&lt;/span&gt;
          &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In both of these examples, the api that the developer using the gem interacts with is the same:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;Clearance&lt;/span&gt;&lt;span class="nf"&gt;.configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.allow_sign_up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.cookie_domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.example.com&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;CarrierWave&lt;/span&gt;&lt;span class="nf"&gt;.configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mo"&gt;0666&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.directory_permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mo"&gt;0777&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:file&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;After looking at both libraries, you decide you like the &lt;strong&gt;clearance&lt;/strong&gt; implementation for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does not rely on &lt;code&gt;ActiveSupport::Concern&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Uses mostly &lt;code&gt;attr_accessor&lt;/code&gt; combined with methods when more logic is needed&lt;/li&gt;
  &lt;li&gt;Seems simpler (this is subjective)&lt;/li&gt;
  &lt;li&gt;You have no need for reset config logic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keeping this approach in mind, you flush out your Git configuration object:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;# lib/cool_git_gem/configuration.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CoolGitGem&lt;/span&gt;
  &lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Configuration&lt;/span&gt;
    
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;awesome_branches&lt;/span&gt;
      &lt;span class="vi"&gt;@awesome_branches&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/.*/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;awesome_branches&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@awesome_branches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items_to_regex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;items_to_regex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="nf"&gt;.respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;Regexp&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
    
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configuration&lt;/span&gt;
    &lt;span class="vi"&gt;@configuration&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Configuration&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# lib/cool_git_gem.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CoolGitGem&lt;/span&gt;
  &lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Git&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;push_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branch_should_do_awesome_stuff?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;do_awesome_stuff&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;branch_should_do_awesome_stuff?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed_git_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="no"&gt;CoolGitGem&lt;/span&gt;&lt;span class="nf"&gt;.configuration.awesome_branches.any?&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;parsed_git_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;git_branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:git&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:branch&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.to_s.strip&lt;/span&gt;
      &lt;span class="n"&gt;git_branch&lt;/span&gt;&lt;span class="nf"&gt;.sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^origin\//&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# config/initializers/cool_git_gem.rb - app 1&lt;/span&gt;
&lt;span class="no"&gt;CoolGitGem&lt;/span&gt;&lt;span class="nf"&gt;.configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.awesome_branches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%w(master)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# config/initializers/cool_git_gem.rb - app 2&lt;/span&gt;
&lt;span class="c1"&gt;# nothing needed, matches any branch by default&lt;/span&gt;

&lt;span class="c1"&gt;# config/initializers/cool_git_gem.rb - app 3&lt;/span&gt;
&lt;span class="no"&gt;CoolGitGem&lt;/span&gt;&lt;span class="nf"&gt;.configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.awesome_branches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.*-dev&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;/crazy/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And just like that, anyone can add arrays of regex's or regex strings to match branch names. We also now have a really great structure to store configuration as our gem grows.&lt;/p&gt;

&lt;p&gt;Using this technique, I'll bet you understand your new config object far better than you would have by just consulting StackOverflow and doing the copy/paste approach.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Integrating with GitHub - Authentication and Web Hooks</title>
    <link rel="alternate" href="http://cball.me/integrating-with-github-authentication-and-web-hooks/"/>
    <id>http://cball.me/integrating-with-github-authentication-and-web-hooks/</id>
    <published>2014-01-16T05:00:00Z</published>
    <updated>2014-01-16T15:23:50-05:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr /&gt;
&lt;p&gt;Just over two weeks ago, I (and hopefully you!) started a challenge to "&lt;a href="http://cball.me/just-build-it-a-two-week-challenge/"&gt;Just build it&lt;/a&gt;". We set a timeline of two weeks to see what we could build in order to level up our development skills. I want to go over what I built, what I've learned, and give you tips you can implement in your applications.&lt;/p&gt;

&lt;p&gt;The application I built is called Gitshot (clearly, I didn't waste time thinking of a name), and it gives developers and designers the ability to generate screenshots from GitHub pull requests. </summary>
    <content type="html">&lt;hr /&gt;
&lt;p&gt;Just over two weeks ago, I (and hopefully you!) started a challenge to "&lt;a href="http://cball.me/just-build-it-a-two-week-challenge/"&gt;Just build it&lt;/a&gt;". We set a timeline of two weeks to see what we could build in order to level up our development skills. I want to go over what I built, what I've learned, and give you tips you can implement in your applications.&lt;/p&gt;

&lt;p&gt;The application I built is called Gitshot (clearly, I didn't waste time thinking of a name), and it gives developers and designers the ability to generate screenshots from GitHub pull requests.  So that I don't overload your brain or mine, this is a first in a series of 6 posts detailing almost every aspect of how the application works. Here's what we'll cover:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Integrating with GitHub - Authentication and Web Hooks&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Launching a Virtual Machine - Buddy up with Vagrant&lt;/li&gt;
  &lt;li&gt;Integrating Further with GitHub - SSH Keys and Deploy Keys&lt;/li&gt;
  &lt;li&gt;Booting your App in the Background&lt;/li&gt;
  &lt;li&gt;Generating Screenshots with PhantomJS&lt;/li&gt;
  &lt;li&gt;Tying it all together - Look mom, I learned something!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="github-authentication"&gt;GitHub Authentication&lt;/h3&gt;

&lt;h4 id="getting-started"&gt;Getting started&lt;/h4&gt;
&lt;p&gt;GitHub uses OAuth for authentication. Instead of making API requests with a single token, your application will request authorization, receive a user-specific token, and make requests on behalf of that user.&lt;/p&gt;

&lt;p&gt;Start by &lt;a href="https://github.com/settings/applications/new"&gt;registering a new application&lt;/a&gt;. Callback urls in this section do not have to be publicly accessible. Here are my settings:
&lt;img alt="New GitHub Application Settings" src="https://s3.amazonaws.com/cball.me/new-github-app.png" /&gt;&lt;/p&gt;

&lt;p&gt;Add &lt;a href="https://github.com/octokit/octokit.rb"&gt;octokit.rb&lt;/a&gt; to your Gemfile to interface with the GitHub API.&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;octokit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~&amp;gt; 2.0&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Add the following environment variables to your application with the keys from the previous step:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;OCTOKIT_CLIENT_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xxxxx&lt;/span&gt;
&lt;span class="no"&gt;OCTOKIT_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;
&lt;/pre&gt;
&lt;h4 id="show-a-github-link-on-your-loginaccount-page"&gt;Show a GitHub link on your login/account page&lt;/h4&gt;
&lt;p&gt;We'll use Octokit to generate the authorization link for us. This link will identify our application to GitHub as well as request the permissions we specify. It's really important to only ask for what you need rather than trying to get all information under the sun. For Gitshot, I needed the user's email address and information about the repository:&lt;/p&gt;

&lt;pre class="highlight erb"&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;authorize_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Octokit&lt;/span&gt;&lt;span class="nf"&gt;.authorize_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;repo,user:email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Connect to GitHub&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authorize_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h4 id="exchange-an-authorization-code-for-a-proper-access-token"&gt;Exchange an authorization code for a proper access token&lt;/h4&gt;
&lt;p&gt;After the user authorizes our application, GitHub will redirect back to our callback url that we defined in the settings page, passing along a single parameter named &lt;strong&gt;code&lt;/strong&gt;. Let's exchange this for a proper OAuth token, which we'll store to make future calls on behalf of the user.&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;GitHubAuthCallbacksController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;oauth_code&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_from_github_access_token&lt;/span&gt;&lt;span class="nf"&gt;.update_with_github_info&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.save&lt;/span&gt;
      &lt;span class="n"&gt;sign_in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;There was an error contacting GitHub.&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;user_from_github_access_token&lt;/span&gt;
    &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;github_token: &lt;/span&gt;&lt;span class="n"&gt;github_access_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.first_or_initialize&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;github_access_token&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Octokit&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;
    &lt;span class="n"&gt;token_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="nf"&gt;.exchange_code_for_access_token&lt;/span&gt; &lt;span class="n"&gt;code_params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:code&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;token_response&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;access_token&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;code_params&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="nf"&gt;.permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There are a few things to note. First, we exchange our code that we just got back for an access token using &lt;strong&gt;client.exchange_code_for_access_token&lt;/strong&gt;. We can store the received token permanently, but keep in mind the user can revoke access at any time, and that scenario should be handled in your application. Finally, now that we are fully authenticated, we update some basic user info (email, name, and gravatar_url) by making another API request. If a user logs in using GitHub, it's usually safe to assume they do need a password, so we generate a random one.&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:github_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;update_with_github_info&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Octokit&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt; &lt;span class="ss"&gt;access_token: &lt;/span&gt;&lt;span class="n"&gt;github_token&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="nf"&gt;.user&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.email&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.name&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.gravatar_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.gravatar_id&lt;/span&gt;

    &lt;span class="n"&gt;generate_password&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;generate_password&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="nf"&gt;.nil?&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SecureRandom&lt;/span&gt;&lt;span class="nf"&gt;.hex&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 id="github-web-hooks"&gt;GitHub Web Hooks&lt;/h3&gt;

&lt;p&gt;In order to know when to generate screenshots and to be able to gather information from a GitHub pull request, we need to install a web hook. A web hook at its core is &lt;strong&gt;just another callback url&lt;/strong&gt;, that GitHub will post as much information as it possibly can about a pull request, comment or other activity. Here's how we do that:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;ProjectGitHookAdder&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:project&lt;/span&gt;
  &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: :project&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Octokit&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt; &lt;span class="ss"&gt;access_token: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.github_token&lt;/span&gt;
    &lt;span class="n"&gt;hook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="nf"&gt;.create_hook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="nf"&gt;.repository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;web&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;hook_url_config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;hook_options&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="nf"&gt;.id.present?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;hook_url_config&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;url: &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://gitshot.24.183.111.227.xip.io/hooks/1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;hook_options&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;events: &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pull_request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pull_request_review_comment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commit_comment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;issue_comment&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;active: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The important parts of the hook parameters are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;repository name&lt;/strong&gt; in the form of &amp;lt;user/repo&amp;gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;the url&lt;/strong&gt; (when developing locally I like to use &lt;a href="http://xip.io"&gt;xip.io&lt;/a&gt; since it integrates nicely with pow). Keep in mind that this url &lt;em&gt;must be publicly accessible&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;events&lt;/strong&gt; all of the events that will trigger this hook.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;active&lt;/strong&gt; you'll want to set this to true.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHub has great documentation on &lt;a href="http://developer.github.com/v3/repos/hooks/"&gt;hooks&lt;/a&gt; and &lt;a href="http://developer.github.com/v3/repos/hooks/#events"&gt;event types&lt;/a&gt; in case you need something different.&lt;/p&gt;

&lt;h4 id="testing-it-out"&gt;Testing it out&lt;/h4&gt;
&lt;p&gt;After authenticating and adding a hook to a repository, you should be able to see your new hook installed in the repository settings.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Hook Settings" src="http://cball.me.s3.amazonaws.com/github-hooks.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you find yourself needing to add additional event types, the only way to do so is through the API.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id="parsing-incoming-hooks"&gt;Parsing incoming hooks&lt;/h4&gt;
&lt;p&gt;GitHub will post to the url you set in the hook in the previous step. The payload is slightly different for each event you have registered, but a lot of the information is the same. &lt;/p&gt;

&lt;p&gt;In Gitshot, we need to know the url that a user wants a screenshot of, so I decided on a message convention of [screenshot /myurl]. To find this, we need to scan incoming hook data for this string. If the message is not found, or the pull request is closed, we ignore it. Here's how that works in Gitshot:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;GitHubHooksController&lt;/span&gt;
  &lt;span class="n"&gt;skip_before_action&lt;/span&gt; &lt;span class="ss"&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;receive&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;github_ip?&lt;/span&gt;
      &lt;span class="no"&gt;GitHubHookProcessor&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:hook&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.process&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;nothing: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;github_ip?&lt;/span&gt;
    &lt;span class="c1"&gt;# GH: &amp;quot;The Public IP addresses for these hooks are: 192.30.252.0/22&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="nf"&gt;.ip&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/192.30.(252|253|254|255).\d+/&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In the controller, we just make sure the request comes from a valid GitHub ip address, and pass the hook params along to our &lt;strong&gt;GitHubHookProcessor&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;GitHubHookProcessor&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:hook_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:project&lt;/span&gt;
  
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@hook_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hook_params&lt;/span&gt;
    &lt;span class="vi"&gt;@project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;project?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;valid_hook?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hook_repo_matches_project?&lt;/span&gt;
      &lt;span class="n"&gt;process_pull_request&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;process_issue&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;process_comment&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;process_pull_request&lt;/span&gt;
    &lt;span class="no"&gt;GitHubPullRequestHookProcessor&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pull_request&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.process&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;process_issue&lt;/span&gt;
    &lt;span class="no"&gt;GitHubIssueHookProcessor&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.process&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;process_comment&lt;/span&gt;
    &lt;span class="no"&gt;GitHubCommentHookProcessor&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:comment&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.process&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;GitHubHookProcessor&lt;/strong&gt; runs the hook parameters through individual sub-processors, returning if a match for [screenshot /myurl] is found. If the processor finds the requested url, it also parses the BASE and HEAD commit hashes for the pull request, as well as checks the open/closed state to make sure its worth going any further. Unfortunately, we have to use 3 different processors since GitHub formats each of the parameters differently. It's also far better to split things out into separate classes than it is to add a bunch of if statements in our main processor.&lt;/p&gt;

&lt;p&gt;In an upcoming post, we'll see how to use these parsed messages to check out Git branches and instruct PhantomJS where to go to generate a screenshot.&lt;/p&gt;

&lt;h3 id="looking-ahead"&gt;Looking ahead&lt;/h3&gt;
&lt;p&gt;We've done a lot here! We started working with the GitHub API, authorized our application using OAuth, listed repositories for a user, and installed a hook to notify us when there is activity on the repository we care about. &lt;/p&gt;

&lt;p&gt;In part 2, we will be delving into virtual machines using Vagrant. This is extremely important in order to be able to check out and run code from an authorized repository in an secure, isolated, and temporary environment. &lt;a href="http://cball.me/newsletter"&gt;Get email updates for the rest of the series&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to Grow your Consulting Business in only 4 Hours per Week</title>
    <link rel="alternate" href="http://cball.me/how-to-grow-your-consulting-business-in-only-4-hours-per-week/"/>
    <id>http://cball.me/how-to-grow-your-consulting-business-in-only-4-hours-per-week/</id>
    <published>2014-01-05T05:00:00Z</published>
    <updated>2014-01-05T19:25:20-05:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr&gt;&lt;p&gt;If you're like me, you started (or plan to start) your consulting as a side business while keeping a full-time job. This is a great way to ease in to consulting, but requires putting in long hours every day to grow your business. And doing this over...&lt;/p&gt;</summary>
    <content type="html">&lt;hr /&gt;
&lt;p&gt;If you're like me, you started (or plan to start) your consulting as a side business while keeping a full-time job. This is a great way to ease in to consulting, but requires putting in long hours every day to grow your business. And doing this over an extended period of time will almost certainly lead to burnout.&lt;/p&gt;

&lt;p&gt;How then, can you take on additional work while maintaining a high degree of quality and avoiding burnout? &lt;strong&gt;By effectively using subcontractors&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id="find-the-right-talent"&gt;Find the right talent&lt;/h4&gt;
&lt;p&gt;Just like hiring a full-time employee, you have to find the right people in order to have any chance of being successful. I did this two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I had some developer friends from previous jobs that were interested in making a little extra money on the side.&lt;/li&gt;
  &lt;li&gt;I found a few others at &lt;a href="http://bostonrb.org"&gt;boston.rb&lt;/a&gt;, my local ruby meetup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're talking with people you've never worked with, try to get a feel for their skill level, what their strengths are, and the types of things they've worked on. The beauty of using someone as a subcontractor is you can try them out to make sure they are a good fit. If things go south, you're only out the initial time investment.&lt;/p&gt;

&lt;h4 id="build-up-a-network"&gt;Build up a network&lt;/h4&gt;
&lt;p&gt;If you have people that are doing work for you part-time, you'll have to deal with multiple schedules and scheduling issues. To help insulate yourself from potential problems, you're going to need overlap and backup. A bench, so to speak. I've found a core group of 3-4 developers works great for me.&lt;/p&gt;

&lt;p&gt;When trying to plan a weekly project roadmap, think of subcontractor hours as about 1/4 those of a normal employee. This past year, my subcontractors averaged no more than 7.5 hours per week, and I essentially gave them freedom to work as many hours as they wanted. Remember, they have full time jobs too. &lt;/p&gt;

&lt;h4 id="you-should-always-be-the-one-kicking-off-the-project"&gt;You should always be the one kicking-off the project&lt;/h4&gt;
&lt;p&gt;There are two reasons for this.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You are the face of the business. Your clients will be talking to you, not your subcontractors.&lt;/li&gt;
  &lt;li&gt;You can always be sure that the project management tools, initial code structure, and workflow are set up properly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With the initial setup out of the way, you can then start divvying out the work.&lt;/p&gt;

&lt;h4 id="charge-more-than-your-subcontractors-charge-you"&gt;Charge more than your subcontractors charge you&lt;/h4&gt;
&lt;p&gt;Never pass the cost of your subcontractor directly to the client. &lt;strong&gt;Always charge a markup&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Say you bill out at $150 per hour (though I recommend using weekly rates after you're established) and your subcontractor charges $100 per hour. Here's how that works for an average 7.5 hour week:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id="x-75---100-x-75--375--4-management-hrs--9375hr"&gt;$150 x 7.5 - $100 x 7.5 = $375 / 4 management hrs = $93.75/hr&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;You're getting paid $93.75 per hour to do 4 hours of project management and code reviews. That being said, I almost never need the 4 hours I've allotted for this and end up spending only about 2 hours per week. That math comes out far better:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id="x-75---100-x-75--375--2-management-hrs--18750hr"&gt;$150 x 7.5 - $100 x 7.5 = $375 / 2 management hrs = $187.50/hr&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;h4 id="use-a-good-invoicing-tool"&gt;Use a good invoicing tool&lt;/h4&gt;
&lt;p&gt;I recommend &lt;a href="https://echobind.freshbooks.com/refer/www"&gt;Freshbooks&lt;/a&gt; since it has a great subcontractor feature. Subcontractors can invoice me whenever they'd like at whatever rate we've agreed to, and it all flows through to my invoices to clients at the rate that I set.&lt;/p&gt;

&lt;h4 id="do-it-all-in-4-hours-per-week"&gt;Do it all in 4 hours per week&lt;/h4&gt;
&lt;p&gt;Once you have this system set up, here's how it allows you to grow with limited time invested:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At the beginning of the week, plan your development work for that week based on subcontractors scheduling. Each week, try to get a feel for how many hours each person thinks they can put in and compare that with the hours they actually end up working. I do this with a simple spreadsheet. &lt;strong&gt;(0.5 hours)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;During the week review all code and approve it before it goes into the main codebase. I do this using Github Pull Requests. The actual amount of time varies based on the feature and the skill of your subcontractors, but if you just review and offer improvement suggestions it shouldn't take up a ton of time. &lt;strong&gt;(1-3.5 hours)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="challenges"&gt;Challenges&lt;/h4&gt;
&lt;p&gt;Using subcontractors to grow your business is not without its challenges. Here are a few.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dealing with schedules. If someone doesn't come through, it all falls back on you. Because of this it's extremely important to not overbook yourself.&lt;/li&gt;
  &lt;li&gt;Dealing with turn-over. Subcontractors by nature are not as stable as full-time employees. There is no guarantee how long someone will be available to you.&lt;/li&gt;
  &lt;li&gt;Development work is done nights and weekends. I've never had this be an issue with any of my clients, but it's something to note. As long as your accessible to them via email and phone during the day you should not run into any problems.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Subcontractors are one of the many ways that allowed me to make the jump from part-time to running &lt;a href="http://echobind.com"&gt;echobind&lt;/a&gt; full-time. By slowly taking on client work and using subcontractors to fill in the gaps, you'll be able to build up a financial runway and enough of a project pipeline to transition to consulting full-time. I'll explain this in more detail - &lt;strong&gt;including when to make the jump&lt;/strong&gt; - in future posts. Here's to growth!&lt;/p&gt;
</content>
  </entry>
</feed>
