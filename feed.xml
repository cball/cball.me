<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Level Up</title>
  <subtitle>Your development and consulting skills</subtitle>
  <id>http://cball.me/</id>
  <link href="http://cball.me/"/>
  <link href="http://cball.me/feed.xml" rel="self"/>
  <updated>2014-12-22T14:40:00Z</updated>
  <author>
    <name>Chris Ball</name>
  </author>
  <entry>
    <title>Bring some ES6 Awesome with esnext</title>
    <link rel="alternate" href="http://cball.me/bring-some-es6-awesome-with-esnext/"/>
    <id>http://cball.me/bring-some-es6-awesome-with-esnext/</id>
    <published>2014-12-22T14:40:00Z</published>
    <updated>2014-12-22T09:51:39-05:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr&gt;&lt;p&gt;ES6 is the next version of JavaScript. &lt;a href="https://github.com/esnext/esnext"&gt;esnext&lt;/a&gt; is a library that allows you to ES6 functions today.&lt;/p&gt;

&lt;p&gt;What does this mean if you’re an Ember developer? If you’re using ember-cli 0.1.3 or later, you can use it out of the box without any additional configuration...&lt;/p&gt;</summary>
    <content type="html">&lt;hr /&gt;

&lt;p&gt;ES6 is the next version of JavaScript. &lt;a href="https://github.com/esnext/esnext"&gt;esnext&lt;/a&gt; is a library that allows you to ES6 functions today.&lt;/p&gt;

&lt;p&gt;What does this mean if you’re an Ember developer? If you’re using ember-cli 0.1.3 or later, you can use it out of the box without any additional configuration thanks to &lt;a href="https://github.com/stefanpenner/ember-cli/pull/2452"&gt;this Pull Request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at three top features and some benefits provided by esnext that might eliminate the need to add CoffeeScript to your next project.&lt;/p&gt;

&lt;h3 id="arrow-functions"&gt;Arrow Functions&lt;/h3&gt;
&lt;p&gt;If you’ve used CoffeeScript, arrow functions should be familiar. Typing the word function all of the time can get annoying. Using the fat arrow, you can use a much nicer syntax for writing functions.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// The es6 way using esnext
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I am eating &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Compiled output
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I am eating &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When using functions that change the scope of this (such as &lt;code&gt;forEach&lt;/code&gt;) you may have seen the following pattern:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// this is common, but don’t do it.
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;_this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;this&lt;/code&gt; inside an arrow function is the same as this in surrounding code, we can make the above example better: &lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;foods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;“I can already do that with CoffeeScript” you might say. True, but compare the code you end up with. Which do you think is easier to debug?&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// compiled JavaScript output with esnext
&lt;/span&gt;&lt;span class="nx"&gt;foods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// compiled CoffeeScript output
&lt;/span&gt;&lt;span class="nx"&gt;foods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;One caveat to note&lt;/em&gt;: because Ember extends the &lt;code&gt;function&lt;/code&gt; prototype to provide the &lt;code&gt;property&lt;/code&gt; and &lt;code&gt;observes&lt;/code&gt; keywords, you can’t use the fat arrow with a &lt;code&gt;property&lt;/code&gt; or &lt;code&gt;observes&lt;/code&gt; declaration. For those, you’ll still need to use the &lt;code&gt;function&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;For standard functions you’re good to go.&lt;/p&gt;

&lt;h3 id="template-strings"&gt;Template Strings&lt;/h3&gt;
&lt;p&gt;One of the things that has always bothered me is the lack of string concatenation in JavaScript. ES6 Template Strings fix that:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// standard JavaScript
&lt;/span&gt;&lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;food&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I am getting &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;food&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// the es6 way
&lt;/span&gt;&lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;food&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;getting&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;food&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Template strings can even span multiple lines.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// invalid in standard JavaScript
&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;what kind
of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;nounFromUser&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; do you
drive?&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;// es6 template string
&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;what&lt;/span&gt; &lt;span class="nx"&gt;kind&lt;/span&gt;
&lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nounFromUser&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;
&lt;span class="nx"&gt;drive&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;They have some &lt;a href="http://mozintern.wordpress.com/2014/07/31/ecmascript-6-template-strings-2/"&gt;other powerful features&lt;/a&gt; too.&lt;/p&gt;

&lt;h3 id="destructuring"&gt;Destructuring&lt;/h3&gt;
&lt;p&gt;Destructuring is great when you need to set variables that have the same name as object properties. For example, say you need to configure options for a graph:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// standard JavaScript
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;graphWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;graphHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;marginTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;marginBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marginBottom&lt;/span&gt;

&lt;span class="c1"&gt;// the es6 way
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;graphWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;graphHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;marginBottom&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 id="coffeescript-can-already-do-this-why-use-es6esnext"&gt;CoffeeScript can already do this. Why use ES6/esnext?&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;The source code you write will look almost identical to the compiled output. Any differences are easy to follow. As a developer, this makes your life much easier when debugging an issue in your app!&lt;/li&gt;
  &lt;li&gt;Your file size will be smaller.&lt;/li&gt;
  &lt;li&gt;You won’t have to deal with unexpected implicit returns. For example, actions in Ember will bubble if you return a truthy value from them. Because CoffeeScript has an implicit return from the last line in a function, it is very easy to accidentally write code that will bubble up to parent controllers/routes.&lt;/li&gt;
  &lt;li&gt;If you extract a piece of your app to an addon, you will benefit from more community collaboration by using JavaScript.&lt;/li&gt;
  &lt;li&gt;ES6 module imports/exports are available without using backticks. &lt;/li&gt;
  &lt;li&gt;Your code will be somewhat future proof. Since a core focus of esnext is api compatibility, when ES6 is available natively in all major browsers, the esnext library should be able to be removed and the code will continue to work. CoffeeScript has features that will keep it from fully adopting ES6, and it will likely require a rewrite.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’re converting from CoffeeScript, you’ll have to remember to use the word this, add commas in object definitions, parenthesis, and some semicolons. Outside of that, with the ES6 features provided by esnext, you probably won’t miss CoffeeScript at all.&lt;/p&gt;

&lt;p&gt;Update:
I’ve added a repo with a few examples:&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Organize Your Ember App with Pods</title>
    <link rel="alternate" href="http://cball.me/organize-your-ember-app-with-pods/"/>
    <id>http://cball.me/organize-your-ember-app-with-pods/</id>
    <published>2014-11-17T16:25:00Z</published>
    <updated>2015-01-16T12:42:44-05:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr&gt;&lt;p&gt;You may have seen references to pods when reading up on Ember and ember-cli. What the heck are pods? Simply put, pods are a way of grouping files in your project by feature (ex: Task) rather than by type (ex: controllers). According to the ember-cli...&lt;/p&gt;</summary>
    <content type="html">&lt;hr /&gt;

&lt;p&gt;You may have seen references to pods when reading up on Ember and ember-cli. What the heck are pods? Simply put, pods are a way of grouping files in your project by feature (ex: Task) rather than by type (ex: controllers). According to the ember-cli documentation, “As your app gets bigger, a feature-driven structure may be better. Splitting your application by functionality/resource would give you more power and control to scale and maintain it”.&lt;/p&gt;

&lt;p&gt;And the best part? You don’t have to decide to go with this structure right away. Thanks to ember-cli conventions, when a pod structure is specified but the necessary file is not found, the Resolver (how ember-cli looks up files) will fall back to the default naming structure. Let’s look at how use pods, and how this convention will allow us to move an existing app to a pod-based naming structure.&lt;/p&gt;

&lt;h4 id="use-pods-of-features-for-better-organization"&gt;Use pods of features for better organization.&lt;/h4&gt;
&lt;p&gt;By default, a Taco resource might have the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;app/controllers/taco.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;app/routes/taco.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;app/models/taco.js&lt;/code&gt; &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;app/templates/taco.hbs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a pod-based naming convention, the files would be located at: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;app/taco/controller.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;app/taco/route.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;app/taco/model.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;app/taco/template.hbs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As your application grows, you will end up with lots of controllers, with quite a few of them living under app/controllers. The same goes for templates and routes. While you can always wildcard search your project to open files, it can be really convenient having a route, controller, and template for a resource/feature located under the same directory.&lt;/p&gt;

&lt;h4 id="use-podmoduleprefix-to-specify-the-root-folder-for-pods"&gt;Use podModulePrefix to specify the root folder for pods.&lt;/h4&gt;
&lt;p&gt;podModulePrefix is an optional configuration setting in ember-cli that specifies the root folder for all pods. It can be set in environment.js.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// config/environment.js
&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ENV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;modulePrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;podModulePrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;app/pods&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;locationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;//...
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;With this in place, we can begin incrementally moving files from the default folder structure into pods. If you don’t specify &lt;code&gt;podModulePrefix&lt;/code&gt;, the Resolver will look for pods under &lt;code&gt;app/&lt;/code&gt;.&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;mv app/controllers/taco.js app/pods/taco/controller.js
&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;mv app/routes/taco.js app/pods/taco/route.js
&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;mv app/templates/taco.hbs app/pods/taco/template.hbs
&lt;/pre&gt;
&lt;p&gt;Going forward, just pass &lt;code&gt;--pod&lt;/code&gt; to &lt;code&gt;ember generate&lt;/code&gt; when generating new files.&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;ember g route taco/cheese --pod
  create app/pods/taco/cheese/route.js
  create app/pods/taco/cheese/template.hbs
  create tests/unit/routes/taco/cheese-test.js

&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;ember g component hot-sauce --pod
  create app/pods/components/hot-sauce/component.js
  create app/pods/components/hot-sauce/template.hbs
  create tests/unit/components/hot-sauce-test.js
&lt;/pre&gt;
&lt;h4 id="to-pod-or-not-to-pod-its-up-to-you"&gt;To pod or not to pod? It’s up to you.&lt;/h4&gt;
&lt;p&gt;Using a pod-based folder structure is optional, as is specifying a root folder for pods. Using pods can help keep a large project organized, but if you don’t like it you can still use the default and organize your files by type.&lt;/p&gt;

&lt;p&gt;Ember-cli makes it easy to move to a pod-based structure as you have time by falling back to a type-based naming structure if the pod structure is not present.&lt;/p&gt;

&lt;h4 id="pods-may-become-the-default-for-routable-components-in-ember-20"&gt;Pods may become the default for Routable Components in Ember 2.0.&lt;/h4&gt;

&lt;p&gt;While not implemented yet, the current plan in Ember 2.0 is to render a &lt;em&gt;component&lt;/em&gt; rather than a &lt;em&gt;controller&lt;/em&gt; when entering a route. This change also advocates using a pod-based structure for these routable components, and may become the default.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://github.com/emberjs/rfcs/pull/15"&gt;The Road to Ember 2.0 RFC&lt;/a&gt; for more information (search for pod).&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>I18n in Practice</title>
    <link rel="alternate" href="http://cball.me/i18n-in-practice/"/>
    <id>http://cball.me/i18n-in-practice/</id>
    <published>2014-10-24T17:00:00Z</published>
    <updated>2014-11-17T16:33:23-05:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr&gt;&lt;p&gt;In &lt;a href="/not-using-i18n-you-probably-should-be"&gt;part 1&lt;/a&gt; of this series on using I18n, we looked at reasons to use I18n in your apps, even if you only need to support a single language.&lt;/p&gt;

&lt;p&gt;Now, let’s look at how to use I18n in that context using both &lt;a href="#i18n-rails"&gt;Rails&lt;/a&gt; and &lt;a href="#i18n-ember"&gt;ember.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="i18n-rails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="i18n-example-in-rails"&gt;I18n example in Rails&lt;/h4&gt;
</summary>
    <content type="html">&lt;hr /&gt;

&lt;p&gt;In &lt;a href="/not-using-i18n-you-probably-should-be"&gt;part 1&lt;/a&gt; of this series on using I18n, we looked at reasons to use I18n in your apps, even if you only need to support a single language.&lt;/p&gt;

&lt;p&gt;Now, let’s look at how to use I18n in that context using both &lt;a href="#i18n-rails"&gt;Rails&lt;/a&gt; and &lt;a href="#i18n-ember"&gt;ember.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="i18n-rails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="i18n-example-in-rails"&gt;I18n example in Rails&lt;/h4&gt;
&lt;p&gt;Using I18n Rails is &lt;a href="http://guides.rubyonrails.org/i18n.html"&gt;very well documented&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get the benefits we discussed in &lt;a href="/not-using-i18n-you-probably-should-be"&gt;part 1&lt;/a&gt;, you can use the built in lazy lookup that Rails provides:&lt;/p&gt;

&lt;pre class="highlight erb"&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="c1"&gt;# app/views/favorite_songs/new.html.erb &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="vi"&gt;@favorite_song&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.submit&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight yaml"&gt;&lt;span class="c1"&gt;# config/locales/en.yml&lt;/span&gt;
&lt;span class="s"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;helpers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="s"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Create&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;%{model}&amp;quot;&lt;/span&gt;
     &lt;span class="s"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;%{model}&amp;quot;&lt;/span&gt;
     &lt;span class="s"&gt;favorite_song&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Add&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Favorites&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/features/user_favorites_song_spec.rb&lt;/span&gt;
&lt;span class="n"&gt;click&lt;/span&gt; &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="nf"&gt;.t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;helpers.submit.favorite_song.create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;One advantage to using the lazy lookup structure is that you can have a global fallback string of “Create a song” or “Create a playlist”, and you can add more specific values like “Add to Favorites” where required.&lt;/p&gt;

&lt;p&gt;Or, if you prefer to be explicit and store your translations in whatever grouping makes sense to you, you can do that too:&lt;/p&gt;

&lt;pre class="highlight erb"&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="c1"&gt;# app/views/favorite_songs/new.html.erb &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="vi"&gt;@song&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.submit&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;songs.favorite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight yaml"&gt;&lt;span class="c1"&gt;# config/locales/en.yml&lt;/span&gt;
&lt;span class="s"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;favorite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Add&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Favorites&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/features/user_favorites_song_spec.rb&lt;/span&gt;
&lt;span class="n"&gt;click&lt;/span&gt; &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="nf"&gt;.t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;songs.favorite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a name="i18n-ember"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="i18n-example-in-emberjs"&gt;I18n example in ember.js&lt;/h4&gt;
&lt;p&gt;Since it’s not built into the framework, using I18n in ember is a bit less straightforward. There is an existing library called &lt;a href="https://github.com/jamesarosen/ember-i18n"&gt;ember-i18n&lt;/a&gt; that has been around for a while and works well, though as of 10/24/14 does not support ember canary (what will be 1.9).&lt;/p&gt;

&lt;p&gt;I wanted to see if I could build a proof of concept for a more stripped down, more ember-cli integrated library that I hope to simplify and turn into an addon shortly. It’s not quite ready yet, but you can use a similar technique manually as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a simple I18n class that handles fetching a key and interpolating strings.&lt;/li&gt;
  &lt;li&gt;Add an initializer that injects the class as a singleton throughout the app.&lt;/li&gt;
  &lt;li&gt;Add a Handlebars helper that calls the injected class to get translations.&lt;/li&gt;
  &lt;li&gt;Add the actual translations.&lt;/li&gt;
  &lt;li&gt;Use them in your templates with or without bindings.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;//app/utils/i18n.js
&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ember&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;translations&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../translations/en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;I18n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;currentLocale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;defaultLocale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;keyWithPrefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_translationPrefix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;translations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyWithPrefix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Missing translation: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;keyWithPrefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_interpolate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;


  &lt;span class="na"&gt;_interpolate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\{\{(.*?)\}\}/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;_translationPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;currentLocale&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;currentLocale&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// app/initializers/i18n-setup.js
&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;I18n&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../utils/i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;initialize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;util:i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;route&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;util:i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;controller&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;util:i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;helper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;util:i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i18n-setup.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;initialize&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// app/helpers/i18n-t.js
&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ember&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handlebars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeBoundHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// app/translations/en.js
&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ember&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;favoriteSongs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Add to {{crazy}} Favorites&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Remove from Favorites&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;My {{crazy}} Favorites&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight handlebars"&gt;&lt;span class="c"&gt;{{! app/templates/index.hbs }}&lt;/span&gt;
create: &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;i18n-t&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favoriteSongs.create&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
with binding: &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;i18n-t&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favoriteSongs.create&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;crazy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;howCrazy&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;swap-locale&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;swapLocale&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;i18n-t&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;swapLocale&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now, in your tests you can use it like so (in the actual library I plan to add a test helper to avoid having to call &lt;code&gt;I18n.create()&lt;/code&gt;):&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;I18n&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../../utils/i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Acceptance: UserDoesStuff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;startApp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;i18n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;destroy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;visiting /&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                      
  &lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                                                     
  &lt;span class="nx"&gt;andThen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#swap-locale&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;swapLocale&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;    
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The full source code for the proof of concept app is available at &lt;a href="https://github.com/cball/ember-cli-i18n-example"&gt;cball/ember-cli-i18n-example&lt;/a&gt;. Using this will get much simpler once you don’t manually have to put all the pieces together. I will update this post when I get things a little further along.&lt;/p&gt;

&lt;p&gt;Happy I18n’ing!&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Not using I18n? You probably should be.</title>
    <link rel="alternate" href="http://cball.me/not-using-i18n-you-probably-should-be/"/>
    <id>http://cball.me/not-using-i18n-you-probably-should-be/</id>
    <published>2014-10-24T17:00:00Z</published>
    <updated>2014-11-17T16:33:23-05:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr&gt;&lt;p&gt;I18n is an acronym for internationalization. It is a part of most frameworks, and is used in applications to translate words or phrases to other languages. Instead of writing the phrase “My favorite songs”, you make a call to the I18n library to fetch...&lt;/p&gt;</summary>
    <content type="html">&lt;hr /&gt;

&lt;p&gt;I18n is an acronym for internationalization. It is a part of most frameworks, and is used in applications to translate words or phrases to other languages. Instead of writing the phrase “My favorite songs”, you make a call to the I18n library to fetch the phrase based on a key (my.favorite.songs for example).&lt;/p&gt;

&lt;p&gt;“But my app only needs to support English, why should I do this?” In this first part, we will look at some great reasons why, and then in &lt;a href="/i18n-in-practice"&gt;part 2&lt;/a&gt;, we will take a look at examples in both Rails and ember.js.&lt;/p&gt;

&lt;h4 id="avoid-string-duplication-and-change-easily"&gt;Avoid string duplication, and change easily.&lt;/h4&gt;
&lt;p&gt;Think about how many sections of your app have buttons that say “Create” or “Save”. Let’s say your designer decides that the buttons will convert better if they are specific to each action. Buttons that favorite songs should say “Add to Favorites” instead of “Create”. Wouldn’t it be easier to go change the button text in one place rather than searching the entire project for “Create” and then trying to determine if it was a button that favorited songs?&lt;/p&gt;

&lt;p&gt;Using I18n gives us exactly that - a single place that can be referenced anywhere in the app that provides the necessary text. To make the example change above, all you’d need to do is search your I18n file(s) for the key of 'songs.favorite' and change value to “Add to Favorites”. If after running some A/B tests, your designer was incorrect, its just as easy to change back.&lt;/p&gt;

&lt;h4 id="keep-your-tests-working-if-things-change"&gt;Keep your tests working if things change.&lt;/h4&gt;
&lt;p&gt;Taking the above example a step further, if you’re not using I18n, as soon as you change the necessary buttons to “Add to Favorites” your acceptance tests will break.&lt;/p&gt;

&lt;p&gt;Using I18n in both the app and in the tests will allow you to update strings without having to immediately change your tests after doing so. Less work is a good thing.&lt;/p&gt;

&lt;h4 id="if-you-ever-need-to-add-additional-language-support-youre-ready"&gt;If you ever need to add additional language support, you’re ready.&lt;/h4&gt;
&lt;p&gt;Admittedly, you may not ever need more than one language in your app. But, by using I18n from the start, if there ever is a need all you’ll need to do is: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new 18n file for the new language.&lt;/li&gt;
  &lt;li&gt;Have it translated. Please don’t blindly copy/paste from google translate… you could offend someone.&lt;/li&gt;
  &lt;li&gt;Make minor css updates if the language has long strings.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id="tldr-use-i18n-translations"&gt;TLDR; Use I18n translations!&lt;/h4&gt;
&lt;p&gt;Using I18n even when you’re only supporting one language will help remove code duplication and reduce test churn when updating phrases throughout your app. &lt;/p&gt;

&lt;p&gt;It may seem unnecessary at first, but the benefits will be clear the first time you try different text on a button, or change wording around. It’s also really nice if you later have to add additional language support and already have the groundwork done.&lt;/p&gt;

&lt;h4 id="i18n-in-practice"&gt;I18n in practice&lt;/h4&gt;
&lt;p&gt;Check out &lt;a href="/i18n-in-practice"&gt;part 2&lt;/a&gt; of this post, to see how using I18n as described above works in both &lt;a href="/i18n-in-practice#i18n-rails"&gt;Rails&lt;/a&gt; and &lt;a href="/i18n-in-practice#i18n-ember"&gt;ember.js&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Realtime App Version Notices with socket.io and Redis</title>
    <link rel="alternate" href="http://cball.me/realtime-app-version-notices/"/>
    <id>http://cball.me/realtime-app-version-notices/</id>
    <published>2014-09-24T23:18:00Z</published>
    <updated>2014-11-17T16:33:23-05:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr&gt;&lt;p&gt;If you’ve been on a site powered by &lt;a href="http://www.discourse.org/"&gt;Discourse&lt;/a&gt;, you may have seen the following notification:&lt;/p&gt;

&lt;p&gt;&lt;img alt="discourse update" src="http://cball.me.s3.amazonaws.com/discourse_update.png"&gt;&lt;/p&gt;

&lt;p&gt;How and why did they do this?&lt;/p&gt;

&lt;p&gt;One of the built-in benefits of rendering frontend templates server-side is that you are guaranteed users will be using the...&lt;/p&gt;</summary>
    <content type="html">&lt;hr /&gt;

&lt;p&gt;If you’ve been on a site powered by &lt;a href="http://www.discourse.org/"&gt;Discourse&lt;/a&gt;, you may have seen the following notification:&lt;/p&gt;

&lt;p&gt;&lt;img alt="discourse update" src="http://cball.me.s3.amazonaws.com/discourse_update.png" /&gt;&lt;/p&gt;

&lt;p&gt;How and why did they do this?&lt;/p&gt;

&lt;p&gt;One of the built-in benefits of rendering frontend templates server-side is that you are guaranteed users will be using the most recent version of your application. Since most actions require a refresh from the server, the user usually gets an updated template the next time they click on something.&lt;/p&gt;

&lt;p&gt;If you’re using a client-side framework, however, this is not the case. Your app may have loaded everything it needs from the backend API and might go a very long time without requesting anything new from the server. Or, your user might leave the app open in a tab so they can come back to it at lunchtime. &lt;/p&gt;

&lt;p&gt;Even if you’re not using a client-side framework, this situation can happen if part of your application makes ajax requests to get updated information but stays on the page otherwise.&lt;/p&gt;

&lt;p&gt;How can we show users that there is a new version of the app available?&lt;/p&gt;

&lt;h4 id="determine-the-current-version-of-the-app"&gt;Determine the current version of the app&lt;/h4&gt;
&lt;p&gt;There are many ways to figure out the current version of your application.&lt;/p&gt;

&lt;p&gt;If you’re using ember with ember-cli you could grab the version of your application.js using information from the &lt;code&gt;broccoli-asset-rev&lt;/code&gt; plugin.&lt;/p&gt;

&lt;p&gt;If your client-side application is being served from within Rails, you could use &lt;code&gt;Rails.application.assets.digest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The method I like best is to use a &lt;code&gt;deploy task&lt;/code&gt; to set an application version using git. Assuming you use the same or similar deployment scripts across your apps, it gives a universal way to access app version information regardless of the language the app is using. This of course assumes that all of your application use git for source control.&lt;/p&gt;

&lt;h4 id="store-the-current-version-somewhere-globally-accessible"&gt;Store the current version somewhere globally accessible&lt;/h4&gt;
&lt;p&gt;We use Redis quite a bit at &lt;a href="http://echobind.com"&gt;echobind&lt;/a&gt;. Redis is a great (fast!) key value store and has client libraries for many different languages. This makes it a great candidate to hold our global app version. Since we’re looking at real time notifications, we’ll also use the &lt;a href="http://redis.io/topics/pubsub"&gt;Pub/Sub&lt;/a&gt; functionality.&lt;/p&gt;

&lt;h4 id="example-ruby-deploy-task-backed-by-redis"&gt;Example Ruby deploy task backed by Redis&lt;/h4&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;# Rakefile&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./app_version&amp;#39;&lt;/span&gt;                    
                                           
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deploys the app&amp;#39;&lt;/span&gt;                     
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:deploy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;                            
  &lt;span class="n"&gt;app_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AppVersion&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;frontend&amp;quot;&lt;/span&gt;  
                                           
  &lt;span class="n"&gt;app_version&lt;/span&gt;&lt;span class="nf"&gt;.update_to&lt;/span&gt; &lt;span class="n"&gt;version_from_git&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# deploy production                    &lt;/span&gt;
    &lt;span class="sb"&gt;`divshot push production`&lt;/span&gt;           
  &lt;span class="k"&gt;end&lt;/span&gt;                                      
&lt;span class="k"&gt;end&lt;/span&gt;                                        
                                           
&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;version_from_git&lt;/span&gt;                       
  &lt;span class="sb"&gt;`git rev-parse HEAD`&lt;/span&gt;&lt;span class="nf"&gt;.strip&lt;/span&gt;               
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;# app_version.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;                                                         
                                                                        
&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;AppVersion&lt;/span&gt;                                                        
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:app_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:use_pubsub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:version_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:previous_version_key&lt;/span&gt;
                                                                        
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_pubsub&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                              
    &lt;span class="vi"&gt;@app_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app_key&lt;/span&gt;                                                  
    &lt;span class="vi"&gt;@use_pubsub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;use_pubsub&lt;/span&gt;                                            
    &lt;span class="vi"&gt;@version_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;app_key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-app-version&amp;quot;&lt;/span&gt;                             
    &lt;span class="vi"&gt;@previous_version_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;app_key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-app-version-prev&amp;quot;&lt;/span&gt;               
  &lt;span class="k"&gt;end&lt;/span&gt;                                                                   
                                                                        
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;current&lt;/span&gt;                                                           
    &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt; &lt;span class="n"&gt;version_key&lt;/span&gt;                                               
  &lt;span class="k"&gt;end&lt;/span&gt;                                                                   
                                                                        
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                 
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Setting &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;app_key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; app-version to &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;                
    &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="nf"&gt;.set&lt;/span&gt; &lt;span class="n"&gt;version_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;                                      
    &lt;span class="n"&gt;publish_new_version&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;                                         
  &lt;span class="k"&gt;end&lt;/span&gt;                                                                   
                                                                        
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;previous&lt;/span&gt;                                                          
    &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt; &lt;span class="n"&gt;previous_version_key&lt;/span&gt;                                      
  &lt;span class="k"&gt;end&lt;/span&gt;                                                                   
                                                                        
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;previous&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                
    &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="nf"&gt;.set&lt;/span&gt; &lt;span class="n"&gt;previous_version_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;                             
  &lt;span class="k"&gt;end&lt;/span&gt;                                                                   
                                                                        
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;update_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                        
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;                                             
    &lt;span class="k"&gt;yield&lt;/span&gt;                                                               
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;                                              
  &lt;span class="k"&gt;rescue&lt;/span&gt;                                                                
    &lt;span class="n"&gt;rollback&lt;/span&gt;                                                            
  &lt;span class="k"&gt;end&lt;/span&gt;                                                                   
                                                                        
  &lt;span class="kp"&gt;private&lt;/span&gt;                                                               
                                                                        
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;redis&lt;/span&gt;                                                             
    &lt;span class="vi"&gt;@redis&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Redis&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;                                                
  &lt;span class="k"&gt;end&lt;/span&gt;                                                                   
                                                                        
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;rollback&lt;/span&gt;                                                          
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;An error occured, rolling back &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;app_key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; app-version.&amp;quot;&lt;/span&gt;       
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt;                                             
    &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="nf"&gt;.del&lt;/span&gt; &lt;span class="n"&gt;previous_version_key&lt;/span&gt;                                      
  &lt;span class="k"&gt;end&lt;/span&gt;                                                                   
                                                                        
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;publish_new_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                      
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;use_pubsub&lt;/span&gt;                                                       
      &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="nf"&gt;.publish&lt;/span&gt; &lt;span class="n"&gt;version_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;                                
    &lt;span class="k"&gt;end&lt;/span&gt;                                                                 
  &lt;span class="k"&gt;end&lt;/span&gt;                                                                   
&lt;span class="k"&gt;end&lt;/span&gt;                                                                                                                                     
&lt;/pre&gt;
&lt;p&gt;Now that we have Redis storing the current version of our deployed application, we need a way for the client app to read it.&lt;/p&gt;

&lt;h4 id="websockets"&gt;Websockets&lt;/h4&gt;
&lt;p&gt;Websockets sound great in theory, but bring overhead and complication. For this reason, Discourse &lt;a href="https://meta.discourse.org/t/why-does-discourse-not-use-web-sockets/18302"&gt;built their own solution&lt;/a&gt;. Recently though, a library called &lt;a href="http://socket.io/"&gt;socket.io&lt;/a&gt; has improved quite a bit, and now does a great job of fixing most these issues. So if you’re thinking of using websockets, use socket.io. If you looked at this library pre 1.0 its worth looking at it again.&lt;/p&gt;

&lt;p&gt;Since we’re using Redis as a global store, we can set up a small server that has has the single responsibility of forwarding app version changes to other apps through Redis Pub/Sub and socket.io. This will give us maximum scalability, and won’t impact our main application.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// server.js
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;socket.io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;redisSubscriber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// use socket.io-redis if you need lots of connections. it allows
// socket.io to work across servers
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;socketIORedis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;socket.io-redis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socketIORedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;redisSubscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;frontend-app-version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;redisSubscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iphone-app-version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;redisSubscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;frontend-app-version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;frontend-app-version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// in the real world the following would be an api call that renders json
&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;listening on *:3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="highlight html"&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;versions&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/socket.io/socket.io.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://code.jquery.com/jquery-1.11.1.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;frontend-app-version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#versions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here’s what our server looks like in use. The image is a little small, but we have 4 browsers getting a “new version” message sent 3 different ways. The full source code can be found at &lt;a href="https://github.com/cball/socket.io-new-app-version"&gt;cball/socket.io-new-app-version&lt;/a&gt;. It’s a creative name, I know.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From a deploy rake task looking at the git version&lt;/li&gt;
  &lt;li&gt;A manual version from redis-cli&lt;/li&gt;
  &lt;li&gt;A manual version from the ruby redis client&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="socket.io redis example" src="http://cball.me.s3.amazonaws.com/realtime-app-version/socketio-redis.gif" /&gt;&lt;/p&gt;

&lt;h4 id="polling--response-headers"&gt;Polling &amp;amp; Response Headers&lt;/h4&gt;
&lt;p&gt;If using socket.io is not an option, we can use polling and a special response header in our API. We can check this value on every request, or make an API call on a preset interval (say every 20 minutes), to get the current value.&lt;/p&gt;

&lt;p&gt;If you want to hear more on this approach, shoot me an email or comment below and I’ll write about it.&lt;/p&gt;

&lt;h4 id="dealing-with-a-new-version"&gt;Dealing with a new version&lt;/h4&gt;
&lt;p&gt;Now that we’ve done all the hard work, we just have to check the current version of the app and compare it with the new version.&lt;/p&gt;

&lt;p&gt;In our express app, we get the current version on connect. All we need to do is change our ‘frontend-app-version’ socket listener to show a popup when the versions don’t match.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currentAppVersion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;frontend-app-version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;currentAppVersion&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentAppVersion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentAppVersion&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// show new version alert
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;h4 id="there-are-lots-of-good-techniques-here"&gt;There are lots of good techniques here!&lt;/h4&gt;
&lt;p&gt;Developing this feature gives us lots of good techniques. Here’s what we did:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wrote a rake task.&lt;/li&gt;
  &lt;li&gt;Grabbed the git reference that was deployed to production.&lt;/li&gt;
  &lt;li&gt;Saved current/previous app versions backed by Redis.&lt;/li&gt;
  &lt;li&gt;If the deploy fails, we roll back the current version and make the previous version the current one.&lt;/li&gt;
  &lt;li&gt;Published an update via Redis PubSub&lt;/li&gt;
  &lt;li&gt;Wrote a small Express server that hooks Redis Pub/Sub and socket.io together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before implementing this, be sure your app really needs the functionality. Not all apps do. If users typically sit on pages for long periods of time, and you need to ensure users use the most up-to-date version of your app, give real time app versions a try.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Help I have no tests!</title>
    <link rel="alternate" href="http://cball.me/help-i-have-no-tests/"/>
    <id>http://cball.me/help-i-have-no-tests/</id>
    <published>2014-09-16T04:00:00Z</published>
    <updated>2014-11-17T16:33:23-05:00</updated>
    <author>
      <name>Chris Ball</name>
    </author>
    <summary type="html">&lt;hr&gt;&lt;p&gt;There will come a point in your career as a developer that you run across one of two common scenarios.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#no-tests"&gt;You come face-to-face with a project that has no tests (or very few)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;
&lt;a href="#incorrect-tests"&gt;You come face-to-face with a project that has incorrect tests&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;These two...&lt;/p&gt;</summary>
    <content type="html">&lt;hr /&gt;
&lt;p&gt;There will come a point in your career as a developer that you run across one of two common scenarios.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href="#no-tests"&gt;You come face-to-face with a project that has no tests (or very few)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="#incorrect-tests"&gt;You come face-to-face with a project that has incorrect tests&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These two scenarios are variations on the same theme. Tests exist to verify that your code is working how it should, and are there for you to lean on when adding new features or refactoring. If you can’t lean on a good test suite, it’s very hard to ship and improve a product.&lt;/p&gt;

&lt;p&gt;Let’s talk about strategies for dealing with each of these scenarios.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a name="no-tests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="testing-an-app-with-no-tests-or-very-few"&gt;Testing an app with no tests (or very few).&lt;/h4&gt;
&lt;p&gt;There can be many reasons why an app has no tests, but by far the most common one is that developers “don’t have time for them”. Another (and one that I’ve run into recently in Ember apps) is that the framework is so new that best practices are not fully established or well understood by the community. This often leads to developer confusion, and a “we’ll come back to it later” attitude. Thankfully, with Ember this is increasingly less common due to conventions put in place by ember-cli. If you run into this situation, how can you deal with it?&lt;/p&gt;

&lt;h4 id="start-by-writing-acceptance-level-tests"&gt;Start by writing acceptance-level tests.&lt;/h4&gt;
&lt;p&gt;When an app is without tests, you can’t be sure the code is working as expected. What you can be sure of, however, is how it functions from an end user point of view. This is exactly where you should start! Begin by writing tests for the user interactions that you can verify in the browser. By doing this, you’ll end up with a safety net that you can lean on as you start diving deeper in to the models and unit level tests.&lt;/p&gt;

&lt;p&gt;I’ve found a few patterns helpful when implementing this approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write more acceptance tests than you normally would.&lt;/li&gt;
  &lt;li&gt;Extract a login helper.&lt;/li&gt;
  &lt;li&gt;Cast a wide net, then write a success and fail scenario for each major feature in the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="write-more-acceptance-tests"&gt;Write more acceptance tests.&lt;/h4&gt;
&lt;p&gt;Typically an application should have lots of unit tests and just enough acceptance tests to cover combined and/or complicated scenarios, but because we’re starting from ground zero it helps to temporarily flip that mentality. Again, focus on writing tests for things you &lt;strong&gt;know are correct from a user point of view&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id="extract-a-login-helper"&gt;Extract a login helper.&lt;/h4&gt;
&lt;p&gt;The first thing that you’ll want to do is extract a login helper. You’ll be using this in all of your acceptance tests, so its a logical place to start.&lt;/p&gt;

&lt;p&gt;The implementation is different depending on your framework of choice, but you’ll usually want a &lt;code&gt;login&lt;/code&gt; method that takes a user model as an argument. &lt;/p&gt;

&lt;p&gt;Here’s an example from an Ember app that is using QUnit and Ember Simple Auth as the authentication library:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// tests/helpers/login.js
&lt;/span&gt;&lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerAsyncHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;applicationRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__container__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;route:application&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;authenticateSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;applicationRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;session.currentUser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And another example that doesn’t use an authentication framework, and creates the user in the store. Adding the object to the store is helpful because subsequent calls to &lt;code&gt;this.store.find('user', 1)&lt;/code&gt; from within the same test scenario will return the same user. Stub the login API request using something like &lt;a href="http://github.com/trek/pretender"&gt;pretender&lt;/a&gt;.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// tests/helpers/login.js
&lt;/span&gt;&lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerAsyncHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;applicationRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__container__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;route:application&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pretender&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})];&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;


  &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;applicationRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Dude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dude@wee.net&amp;quot;&lt;/span&gt; 
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fillIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fillIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mattersnot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;If you’re implementing this in a server-side framework, things are a bit easier since you have direct database access. You won’t have to mock the login API, but the concept of a login helper is the same. If you’re in an API only server-side app, you might do this by generating a user and passing the proper headers in a network request.&lt;/p&gt;

&lt;h4 id="cast-a-wide-net-then-write-success-and-fail-scenarios"&gt;Cast a wide net, then write success and fail scenarios.&lt;/h4&gt;
&lt;p&gt;When you’re faced with a large task like writing a full test suite where there is none, it’s easy to get overwhelmed. To quickly cover as much of your app as possible, start by finding groups of features that you can implement as a single acceptance test. Then, go back and fill in the gaps with tests for smaller or more specific features.&lt;/p&gt;

&lt;p&gt;Examples of groups of features include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A user adds a post and then comments on it&lt;/li&gt;
  &lt;li&gt;A user that is not signed in, tries to vote but can’t. Then they sign up and should be able to vote.&lt;/li&gt;
  &lt;li&gt;A user visits a profile page, friends a user, and sees another user in a “You are both friends with” box.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By doing this, you can actually cover a large percentage of your app at a high level. Next, try to figure out a success and failure scenario for each major feature. If you’ve already covered a success scenario when implementing the wide net approach, there is no need to add a redundant test.&lt;/p&gt;

&lt;p&gt;Once you have an acceptable base of acceptance tests, you’re ready to dive down and start writing unit tests. If you come across bugs in the code for your app go ahead and fix them, writing unit tests to back up your changes. You should have enough test coverage from the acceptance test layer to catch bugs introduced by small code changes like this.&lt;/p&gt;

&lt;p&gt;Continuing on, you will eventually have a comprehensive test suite in place. You can then use this test suite to improve your code by refactoring.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a name="incorrect-tests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="testing-a-project-that-has-incorrect-tests"&gt;Testing a project that has incorrect tests.&lt;/h4&gt;
&lt;p&gt;A project that has incorrect tests is sometimes hard to spot. I’ve come across two common cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The app has unit tests that are heavily mocked.&lt;/li&gt;
  &lt;li&gt;The test case isn’t really testing what it needs to.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="heavily-mocked-tests"&gt;Heavily mocked tests&lt;/h4&gt;
&lt;p&gt;When used properly, mocks are great. However, they can be abused. If you find yourself wanting to mock more than just one or two items in a unit test, it probably means you could improve your application design. Work on teasing apart models or service objects to reduce coupling and dependencies. &lt;/p&gt;

&lt;p&gt;One of the biggest dangers with mocks is that something is mocked wrong and you don’t realize it. The test will pass because you mocked it, but could disguise a bug since you’re not using the real object.&lt;/p&gt;

&lt;h4 id="testing-the-wrong-thing"&gt;Testing the wrong thing&lt;/h4&gt;
&lt;p&gt;You might also have a good sized test suite, but some of your tests might be testing the wrong thing. This is dangerous because it can give a false sense of security. It’s tough to spot tests like this, but most commonly it happens by testing behavior of one class from within the unit test of another.&lt;/p&gt;

&lt;p&gt;It can also happen when an object has too many responsibilities. One of those responsibilities slips through the cracks test-wise, and later changes can break things.&lt;/p&gt;

&lt;h4 id="how-to-fix-it"&gt;How to fix it&lt;/h4&gt;
&lt;p&gt;The fix for this is actually pretty simple. If you’re skeptical of an area of your test suite, write a few tests that you think may break it. If you can write a failing test, fix the code so that the test is passing. Next, verify that the entire suite is still passing. If it is, look at the older test and decide if it’s worth keeping around as an alternate scenario. It might be completely invalid, or it might overlap the new test you just wrote. Use your best judgement, and if it’s not worth keeping around don’t be afraid to delete it!&lt;/p&gt;

&lt;p&gt;If you you are unable to write a failing test, then you can breathe a little easier. See if the new test is worth keeping around as an alternate scenario. If not, feel free to trash it.&lt;/p&gt;

&lt;p&gt;After doing this, if things still don’t feel right, then use the confidence from the test coverage to refactor and simplify the code.&lt;/p&gt;

&lt;h4 id="making-it-better"&gt;Making it better&lt;/h4&gt;
&lt;p&gt;These strategies should help you start to take hold of projects you come across that have less than ideal test suites. Often the biggest hurdle is just knowing where to start.&lt;/p&gt;
</content>
  </entry>
</feed>
